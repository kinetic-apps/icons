const fs = require('fs-extra');
const path = require('path');
const { glob } = require('glob');

const ICONS_DIR = path.join(__dirname, '../icons');
const OUTPUT_FILE = path.join(__dirname, '../src/icon-map.ts');

// Simple camelCase function
function toCamelCase(str, pascalCase = false) {
  const result = str
    .replace(/[-_\s.]+(.)?/g, (_, c) => (c ? c.toUpperCase() : ''))
    .replace(/^([A-Z])/, (m) => (pascalCase ? m : m.toLowerCase()));
  return result;
}

async function generateIconMap() {
  console.log('Generating icon map for react-native-svg-transformer...');

  // Find all SVG files
  const svgFiles = await glob('**/*.svg', { cwd: ICONS_DIR });
  console.log(`Found ${svgFiles.length} SVG files`);

  const iconImports = [];
  const iconMapEntries = [];

  for (const file of svgFiles) {
    // Parse file path to get icon name and variant
    const parts = file.split('/');
    const variant = parts[0]; // Line or Solid
    const strokeWidth = parts[1]; // 1.5px (only for Line)
    const iconFileName = path.basename(file, '.svg');
    
    // Generate component name
    const baseName = toCamelCase(iconFileName, false);
    const iconName = variant === 'Solid' ? `${baseName}Solid` : baseName;
    
    // Create the relative path from src to icons
    const relativePath = path.join('../icons', file);
    
    // Add to map
    iconMapEntries.push(`  '${iconName}': () => require('${relativePath}').default`);
  }

  // Generate the TypeScript file
  const content = `// Auto-generated file. Do not edit manually.
// Generated by scripts/generate-icon-map.js

export const iconMap = {
${iconMapEntries.join(',\n')}
};

export type IconName = keyof typeof iconMap;
`;

  await fs.writeFile(OUTPUT_FILE, content);
  console.log(`Icon map generated at ${OUTPUT_FILE}`);
  console.log(`Total icons: ${iconMapEntries.length}`);
}

generateIconMap().catch(console.error);